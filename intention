#!/usr/bin/env bash

ACTION=$1
PROCEDURE=$2

PROTOCOL="xoscrp"
cache_file="$HOME/.cache/${PROTOCOL}"
comms_dir=".${PROTOCOL}/message_queue/"
proc_dir=".${PROTOCOL}/procedures/"

# ================================ [ INIT ] ================================ #

set_shared_location() {
  read -r -p 'Enter path to your shared path/mount point: ' partition
  # sanitize mount point name, ensure existence and write to cache
  [[ $partition != /* ]] && partition="/$partition"
  if [ ! -d $partition ]; then
    echo "Invalid mountpoint: $partition"
    exit 1
  fi
  echo $partition >$cache_file
}

# ENSURE: save windows mountpoint in cache
if [ ! -f $cache_file ]; then
  set_shared_location
fi

get_shared_location() {
  [ ! -f $cache_file ] && set_shared_location
  windows_mountpoint=$(cat $cache_file)
  echo $windows_mountpoint
}

# ENSURE: windows communication and procedure directories
windows_mountpoint=$(get_shared_location)
windows_comm_dir="${windows_mountpoint}/${comms_dir}"
[ ! -d "${windows_comm_dir}" ] && mkdir -p "${windows_comm_dir}"
windows_proc_dir="${windows_mountpoint}/${proc_dir}"
[ ! -d "${windows_proc_dir}" ] && mkdir -p "${windows_proc_dir}"

# =============================== [ ACTION ] =============================== #

is_procedure_available() {
  [[ -f "${windows_proc_dir}/${PROCEDURE}.ps1" ]] && return 0
  return 1
}

is_procedure_called() {
  [[ -f "${windows_comm_dir}/${PROCEDURE}" ]] && return 0
  return 1
}

get_available_procedures() {
  echo "$(ls ${windows_proc_dir} | cut -d '.' -f 1)"
}

help_message() {
  echo "Available Procedures (Windows)"
  echo "=============================="
  get_available_procedures
  echo "=============================="
  echo "Usage: intention [set|unset|status|reboot] <procedure>"
  exit 0
}

# ============================= [ ACTION (2) ] ============================= #

# REQUIRED: ACTION
if [[ -z "$ACTION" ]] || [[ "$ACTION" == "help" ]]; then
  help_message
  exit 0
fi

# ACTION: List remote procedures
if [[ "$ACTION" == "list" ]]; then
  echo "Available Procedures (Windows):"
  get_available_procedures
  exit 0

# ACTION (CRITICAL): Reboot to Windows
elif [[ "$ACTION" == "reboot" ]]; then
  # case: reboot without PROCEDURE
  if [[ -z "$PROCEDURE" ]]; then
    # eg $windows_title = 'Windows Boot Manager (on /dev/nvme0n1p1)'
    windows_title=$(sudo grep -i windows /boot/grub/grub.cfg | cut -d "'" -f 2)
    sudo grub-reboot "$windows_title"
    reboot
    exit 0
  fi

  # case: reboot with PROCEDURE
  if is_procedure_available; then
    touch "${windows_comm_dir}/${PROCEDURE}"
    # eg $windows_title = 'Windows Boot Manager (on /dev/nvme0n1p1)'
    windows_title=$(sudo grep -i windows /boot/grub/grub.cfg | cut -d "'" -f 2)
    sudo grub-reboot "$windows_title"
    reboot
    exit 0
  else
    echo "Procedure $PROCEDURE is not available"
    exit 1
  fi
fi

# ============================= [ ACTION (3) ] ============================= #

# REQUIRED: PROCEDURE
if [[ -z "$PROCEDURE" ]]; then
  help_message
  exit 1
fi

# SANITIZE: remote procedure name
if [[ ! "$PROCEDURE" =~ ^[A-Za-z0-9_-]+$ ]]; then
  echo "Invalid procedure name: $PROCEDURE"
  echo "Valid characters: A-Z, a-z, 0-9, _, -"
  exit 1
fi

# ACTION: Create remote procedure
if [[ "$ACTION" == "set" ]]; then
  if is_procedure_available; then
    touch "${windows_comm_dir}/${PROCEDURE}"
  else
    echo "Procedure $PROCEDURE is not available"
    exit 1
  fi

# ACTION: Delete remote procedure
elif [[ "$ACTION" == "unset" ]]; then
  if is_procedure_called; then
    rm "${windows_comm_dir}/${PROCEDURE}"
  else
    echo "Procedure $PROCEDURE is not set on Windows"
    exit 1
  fi

# ACTION: Status of remote procedure
elif [[ "$ACTION" == "status" ]]; then
  if is_procedure_called; then
    echo "Procedure $PROCEDURE is set on Windows"
  else
    echo "Procedure $PROCEDURE is not set on Windows"
    exit 1
  fi

# ACTION: Invalid command
else
  echo "Invalid command: $ACTION"
  exit 1
fi
